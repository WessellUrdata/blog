---
export const prerender = false;

import dayjs from "dayjs";

interface Props {
  displayLocation: string;
  API_URL: string;
}

const { displayLocation, API_URL } = Astro.props;

const APIDateTimeFormat = "YYYYMMDDHHmm";
const displayDateTimeFormat = "YYYY-MM-DD HH:mm";

interface weatherObject {
  RegionalWeather: {
    ObsTime: string;
    DisplayTime: string;
    Temp: {
      Value: string;
      MaxTemp: string;
      MinTemp: string;
      Station: string;
      DefaultStation: string;
      Valid: boolean;
    };
    RH: {
      Value: string;
      Station: string;
      Valid: boolean;
    };
  };
}

const getWeatherData = async (APIURL: string) => {
  try {
    const res = await fetch(APIURL);
    const data = await res.text();
    const parsed: weatherObject = JSON.parse(data);
    parsed.RegionalWeather.DisplayTime = dayjs(parsed.RegionalWeather.ObsTime, APIDateTimeFormat).format(
      displayDateTimeFormat
    );
    return parsed;
  } catch (error) {
    console.error(error);
    return null;
  }
};

const weatherData = await getWeatherData(API_URL);
---

{
  weatherData && weatherData.RegionalWeather.Temp.Valid && weatherData.RegionalWeather.RH.Valid ? (
    <>
      <div class="grid grid-cols-2 rounded-md bg-slate-900 text-slate-100 text-wrap p-2 m-1">
        <div class="mx-1">
          <h1 class="text-lg">{displayLocation}</h1>
          <p>@ {weatherData.RegionalWeather.DisplayTime}</p>
        </div>
        <div class="mx-1">
          <p class="text-lg flex flex-row justify-around">
            <span>{weatherData.RegionalWeather.Temp.Value}℃</span>
            <span>{weatherData.RegionalWeather.RH.Value}%</span>
          </p>
          <p class="text-xs text-right">
            Min: {weatherData.RegionalWeather.Temp.MinTemp}℃ Max: {weatherData.RegionalWeather.Temp.MaxTemp}℃
          </p>
        </div>
      </div>
    </>
  ) : (
    "Error"
  )
}
